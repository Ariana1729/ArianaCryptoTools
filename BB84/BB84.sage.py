

# This file was *autogenerated* from the file BB84.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_100 = Integer(100); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)
load('../Quantum algs/qubits.sage')

def mz(q,n):
    m = q.measure(n)
    return m

def mx(q,n):
    q.act_qbits(R(-pi/_sage_const_4 ),[n])
    m = q.measure(n)
    q.act_qbits(R(pi/_sage_const_4 ),[n])
    return m

N = _sage_const_100 
alice_basis = bin(randint(_sage_const_0 ,_sage_const_2 **N))[_sage_const_2 :].zfill(N)
bob_basis = bin(randint(_sage_const_0 ,_sage_const_2 **N))[_sage_const_2 :].zfill(N)
alice_measured = []
bob_measured = []
qbits = [bell() for _ in range(N)]

# alice turn
print('Alice measuring')
for i in range(N):
    q = qbits[i]
    m = mz(q,_sage_const_0 ) if alice_basis[i]=='0' else mx(q,_sage_const_0 )
    alice_measured.append(m)
    #print(i,m,str(q))

print('Bob measuring')
for i in range(N):
    q = qbits[i]
    m = mz(q,_sage_const_0 ) if bob_basis[i]=='0' else mx(q,_sage_const_0 )
    bob_measured.append(m)
    #print(i,m,str(q))

print('Key from exchanging measurement states')
for i in range(N):
    if alice_basis[i]==bob_basis[i]:
        print(alice_measured[i],bob_measured[i])

